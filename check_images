#!/usr/bin/env python

import os
import argparse
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import nibabel as nib


def bounding_box_3D(img):
    x = np.any(img, axis=(1, 2))
    y = np.any(img, axis=(0, 2))
    z = np.any(img, axis=(0, 1))
    xmin, xmax = np.where(x)[0][[0, -1]]
    ymin, ymax = np.where(y)[0][[0, -1]]
    zmin, zmax = np.where(z)[0][[0, -1]]
    return xmin, xmax, ymin, ymax, zmin, zmax


def crop_img(img, mask):
    print(f"Original dimensions are: {img.shape}")
    xmin, xmax, ymin, ymax, zmin, zmax = bounding_box_3D(img)
    cropped_img = img[xmin:xmax, ymin:ymax, zmin:zmax]
    cropped_mask = mask[xmin:xmax, ymin:ymax, zmin:zmax]
    print(f"Cropped dimensions are: {cropped_img.shape}")
    return cropped_img, cropped_mask


def pick_slices(x, y, total_slices):
    step_sz = total_slices // (x*y)
    slices = list(range(step_sz//2, total_slices, step_sz-1))
    print(f"Need to take {x*y} slices. Total number of axial slices is {total_slices}, so moving in steps of {step_sz-1}")
    return slices


def slice_img(img, slice_num, slice_axis):
    sliced_img = np.take(img, slice_num, axis=slice_axis)
    oriented_slice = np.flipud(sliced_img.T)
    return oriented_slice


def stack_slices(img, slices, x, y, slice_axis):
    # need to concatenate these in opposite order for FS!
    ind = 0
    for i in range(y):
        for j in range(x):
            slice_num = slices[ind]
            if j == 0:
                row_img = slice_img(img, slice_num, slice_axis)
            else:
                row_img = np.hstack((row_img,
                                     slice_img(img, slice_num, slice_axis)))
            ind += 1
        if i == 0:
            col_img = row_img
        else:
            col_img = np.vstack((col_img, row_img))
    return col_img


def scale_range (input, min, max):
    input += -(np.min(input))
    input /= np.max(input) / (max - min)
    input += min
    return input


def build_lut():
    script_path = os.path.dirname(os.path.abspath(__file__))
    os.chdir(script_path)
    lut_file = os.path.abspath('../freesurfer_utils/info/desikan.txt')
    print(f"Reading {lut_file} for custom colormap...")
    desikan = np.loadtxt(lut_file, delimiter=',', skiprows=1, usecols=(2, 3, 4))
    desikan = np.unique(desikan, axis=0)  # eliminate doubled colors
    desikan_scaled = scale_range(desikan, 0, 1)
    desikan_cmap = mpl.colors.ListedColormap(desikan_scaled)
    return desikan_cmap


def save_figure(filename, quality):
    if quality == "low":
        output_dpi = 100
    elif quality == "high":
        output_dpi = 300
    else:
        output_dpi = 200
    plt.savefig(filename, dpi=output_dpi, bbox_inches="tight", pad_inches=0)


def parse_input():
    parser = argparse.ArgumentParser(description="""Simple quality check tool for registrations and parcellations.
    Built in Python 3.6. Requires numpy, matplotlib, and nibabel.""")
    parser.add_argument("-b", type=str, required=True, metavar="",
                        help="Base image")
    parser.add_argument("-o", type=str, required=True, metavar="",
                        help="Overlay image")
    parser.add_argument("-s", type=str, required=True, metavar="",
                        help=".png file to save as")
    parser.add_argument("-x", type=int, required=False, default=5, metavar="",
                        help="Number of columns (default: 5)")
    parser.add_argument("-y", type=int, required=False, default=3, metavar="",
                        help="Number of rows (default: 3)")
    parser.add_argument("-q",
                        type=str, required=False, default="medium", metavar="",
                        help="Quality of output figure (low/{medium}/high)")
    args = parser.parse_args()
    return args


def io_stream(base_file, overlay_file, save_file, x_imgs, y_imgs, quality):
    print(f"Loading {base_file} as base...")
    base = nib.load(base_file)
    print(f"Loading {overlay_file} as overlay...")
    overlay = nib.load(overlay_file)
    if isinstance(base, nib.freesurfer.MGHImage):
        slice_axis = 1
        print(f"MGH format detected, setting slice axis = 1")
    else:
        slice_axis = 2
        print(f"Nifti format detected, setting slice axis = 2")
    base_cropped, overlay_cropped = crop_img(base.get_data(),
                                             overlay.get_data())
    slices = pick_slices(x_imgs, y_imgs, base_cropped.shape[0])
    print(f"Slices used: {slices}")
    base_img = stack_slices(base_cropped, slices, x_imgs, y_imgs, slice_axis)
    overlay_img = stack_slices(overlay_cropped, slices, x_imgs, y_imgs,
                               slice_axis)
    base_cmap = "gray"
    plt.imshow(base_img, cmap=base_cmap)
    mask_vals = len(np.unique(overlay_cropped))
    if mask_vals > 2:
        desikan_cmap = build_lut()
        plt.imshow(overlay_img, cmap=desikan_cmap, alpha=0.35)
    else:
        overlay_cmap = "plasma"
        plt.imshow(overlay_img, cmap=overlay_cmap, alpha=0.35)
    plt.axis("off")
    # plt.show()
    if args.s.endswith(".png"):
        image_fname = save_file
    else:
        image_fname = save_file + ".png"
    print(f"Saving layered image as {image_fname}...")
    save_figure(image_fname, quality)


if __name__ == "__main__":
    args = parse_input()
    base_file = os.path.abspath(args.b)
    overlay_file = os.path.abspath(args.o)
    save_file = os.path.abspath(args.s)
    x_imgs = args.x
    y_imgs = args.y
    quality = args.q
    io_stream(base_file, overlay_file, save_file, x_imgs, y_imgs, quality)
    print("Done.\n")
